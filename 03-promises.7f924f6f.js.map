{"mappings":"oeAiBA,IAAAA,EAAAC,EAAA,SA6BA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,IAAIC,EAAe,C,SAACL,E,MAAUC,GAE9B,OAAO,IAAIK,SAAQ,CAACC,EAASC,KACvBN,GACFK,EAAQF,GAERG,EAAOH,EAAa,G,CAnCXI,SAASC,cAAc,SAC/BC,iBAAiB,UAGxB,SAAsBC,GACpBA,EAAEC,iBAEF,IAAIC,EAAQC,OAAOH,EAAEI,cAAcf,MAAMgB,OACrCC,EAAOH,OAAOH,EAAEI,cAAcE,KAAKD,OACnCE,EAASJ,OAAOH,EAAEI,cAAcG,OAAOF,OAE3C,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACvDrB,EAAcqB,EAAUN,GACvBO,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBqB,YAAW,KACTzB,EAAA0B,OAAOC,QAAQ,uBAAqBxB,QAAiBC,MAAU,GAC9DA,EAAM,IAEVwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBqB,YAAW,KACTzB,EAAA0B,OAAOG,QAAQ,sBAAoB1B,QAAeC,MAAU,GAC3DA,EAAM,IAEba,GAASI,C","sources":["src/js/03-promises.js"],"sourcesContent":["// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, \n// сколько ввели в поле amount. При каждом вызове передай ей номер создаваемого промиса (position) и задержку \n// учитывая введенную пользователем первую задержку (delay) и шаг (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется \n// через delay времени. Значением промиса должен быть объект, в котором будут свойства position и delay со \n// значениями одноименных параметров. Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(e){\n  e.preventDefault();\n \n  let delay = Number(e.currentTarget.delay.value);\n  let step = Number(e.currentTarget.step.value);\n  let amount = Number(e.currentTarget.amount.value);\n\n  for (let position = 1; position <= amount; position += 1) {\n  createPromise(position, delay)\n  .then(({ position, delay }) => {\n    setTimeout(() => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    }, delay)\n  })\n  .catch(({ position, delay }) => { \n    setTimeout(() => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    }, delay) \n  });\ndelay += step;\n}\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  let promiseValue = {position, delay};\n\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve(promiseValue);\n    }\n      reject(promiseValue);\n  })\n}\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","promiseValue","Promise","resolve","reject","document","querySelector","addEventListener","e","preventDefault","delay1","Number","currentTarget","value","step","amount","position1","then","setTimeout","Notify","success","catch","failure"],"version":3,"file":"03-promises.7f924f6f.js.map"}